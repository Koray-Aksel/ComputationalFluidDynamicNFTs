## the_plotter.py by Ryan Farber 2022-02-06
"""
The purpose of this script is to plot vtk files generated by Athena
from OrszagTang simulations for CFD NFTs V2.0.0 (or V1.x.x beta versions).
"""
import os
import glob
import time; start = time.time()
import numpy as np
import matplotlib.pyplot as plt
import yt; yt.enable_parallelism()
from yt.funcs import mylog; mylog.setLevel(50)
if yt.is_root():
  print("BEGIN the_plotter")
# end if

HOME = "/Users/redx/Documents/Desktop/NFTs/ComputationalFluidDynamicNFTs/V1.0.1/RUNS/"
RUNDIR  = "hlld_256_1pt6"
PLOTDIR = HOME + "Plots_" + RUNDIR
RUNDIR  = HOME + RUNDIR

CMAPS = [
         "Blue Waves_r",
         "Accent",
         "B-W LINEAR",
         "B-W LINEAR_r",
         "Dark2",
         "Eos A",
         "Hardcandy",
         "Haze",
         "Hue Sat Value 2",
         "Nature",
         "Ocean",
         "Pastel1",
         "Pastel2",
         "Peppermint",
         "Plasma",
         "RdBu",
         "STEPS",
         "Set3",
         "Volcano",
         "Waves",
         "bone",
         "coolwarm",
         "doom",
         "flag",
         "hsv",
         "jet",
         "prism",
         "Greys",
         "twilight",
         "autumn",
         "inferno",
         "summer",
         "viridis",
         "winter",
         "seismic",
         "ocean",
         "Reds",
         "spring",
         "Blues"
        ]

for cmap in CMAPS:
  plotdir_now = PLOTDIR + "_" + cmap.replace(" ", "_")

  os.system("mkdir -p " + plotdir_now)
  os.chdir(plotdir_now)
  plot_fs = np.sort(glob.glob("*.png"))

  os.chdir(RUNDIR)

  fs = np.sort(glob.glob("OrszagTang.out2.?????.athdf"))[1:]

  for fn in yt.parallel_objects(fs):
    print("fn: ", fn)
    #save_name = fn.split("out2.")[1].split(".athdf")[0] + ".png"
    save_name = str(int(float(fn.split("out2.")[1].split(".athdf")[0]))-1
                   ).zfill(5) + ".png"

    if save_name in plot_fs:
      continue
    # end if

    ds = yt.load(fn)
    slc = yt.SlicePlot(ds, "z", "density")
    slc.set_cmap(field="density", cmap=cmap)
    slc.hide_colorbar()
    slc.hide_axes()

    os.chdir(plotdir_now)
    slc.save(save_name)
    os.chdir(RUNDIR)
  # end for fs
# end for cmaps
if yt.is_root():
  print("execution rate: ", time.time() - start)
  print("SUCCESS the_plotter")
# end if
## end the_plotter.py
